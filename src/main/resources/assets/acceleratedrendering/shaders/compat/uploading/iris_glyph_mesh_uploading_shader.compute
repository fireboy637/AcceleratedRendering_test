#version 460 core

struct Vertex {
    float   x;
    float   y;
    float   z;
    uint    color;
    float   u0;
    float   v0;
    uint    uv2;
    uint    normal;
    uint    iris_entity_0;
    uint    iris_entity_1;
    uint    iris_data_2;
    uint    iris_data_3;
    uint    iris_data_4;
};

struct VaryingData {
    int     offset;
    int     sharing;
    int     flags;
};

struct SharingData {
    mat4    transform;
    mat3    normal;
};

struct MeshInfo {
    int     sharing;
    uint    color;
    uint    uv1;
    uint    uv2;
};

layout(local_size_x = 128) in;

layout(binding=1,   std430) writeonly   buffer Vertices {
    Vertex      vertices[];
};

layout(binding=2,   std430) readonly    buffer Sharings {
    SharingData sharings[];
};

layout(binding=4,   std430) writeonly   buffer Varyings {
    VaryingData varyings[];
};

layout(binding=7,   std430) readonly    buffer Meshes {
    Vertex      meshVertices[];
};

layout(binding=8,   std430) readonly    buffer MeshInfos {
    MeshInfo    meshInfos[];
};

layout(binding=9,   std430) readonly    buffer ExtraVertices {
    Vertex      extraVertices[];
};

layout(binding=10,  std430) readonly    buffer ExtraVaryings {
    VaryingData extraVaryings[];
};

layout(location=0) uniform uint meshCount;
layout(location=1) uniform uint meshSize;
layout(location=2) uniform uint vertexOffset;
layout(location=3) uniform uint varyingOffset;

void main() {
    uint        indexIn         = gl_GlobalInvocationID.x;
    uint        meshIndex       = indexIn / meshSize;
    uint        index           = indexIn % meshSize;

    if (meshIndex >= meshCount) {
        return;
    }

    Vertex      vertex          = meshVertices  [index];
    MeshInfo    meshInfo        = meshInfos     [meshIndex];
    Vertex      extraVertex     = extraVertices [meshIndex];
    VaryingData extraVarying    = extraVaryings [meshIndex];
    SharingData sharingData     = sharings      [meshInfo.sharing];
    uint        vertexIndex     = index + meshIndex * meshSize + vertexOffset;
    uint        varyingIndex    = index + meshIndex * meshSize + varyingOffset;

    vec4        colorIn         = unpackUnorm4x8    (meshInfo   .color);
    vec4        colorMesh       = unpackUnorm4x8    (vertex     .color);
    uvec2       uv2In           = floatBitsToUint   (unpackSnorm2x16(meshInfo   .uv2));
    uvec2       uv2Mesh         = floatBitsToUint   (unpackSnorm2x16(vertex     .uv2));

    vec4        colorOut        = colorIn * colorMesh;
    uvec2       uv2Out          = max(uv2In, uv2Mesh);

    vec4        pos             = sharingData.transform * vec4          (vertex.x, vertex.y, vertex.z, 1.0);
    // vec3        normal          = sharingData.normal    * unpackSnorm4x8(vertex.normal).xyz;

    vertices[vertexIndex].x             = pos.x;
    vertices[vertexIndex].y             = pos.y;
    vertices[vertexIndex].z             = pos.z;

    vertices[vertexIndex].color         = packUnorm4x8(colorOut);

    vertices[vertexIndex].u0            = vertex.u0;
    vertices[vertexIndex].v0            = vertex.v0;

    // vertices[vertexIndex].uv1           = meshInfo.uv1;
    vertices[vertexIndex].uv2           = packSnorm2x16 (uintBitsToFloat(uv2Out));
    // vertices[vertexIndex].normal        = packSnorm4x8  (vec4           (normalize(normal), 0.0));

    vertices[vertexIndex].iris_entity_0 = vertex.iris_entity_0;
    vertices[vertexIndex].iris_entity_1 = vertex.iris_entity_1;

    varyings[varyingIndex].offset       = 0;
    varyings[varyingIndex].sharing      = meshInfo      .sharing;
    varyings[varyingIndex].flags        = extraVarying  .flags;
}