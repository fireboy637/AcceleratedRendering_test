#version 460 core

struct Vertex {
    float   x;
    float   y;
    float   z;
    float   u0;
    float   v0;
};

struct VaryingData {
    int     offset;
    int     sharing;
    int     flags;
};

struct SharingData {
    mat4    transform;
    mat3    normal;
};

layout(local_size_x = 128) in;

layout(binding=0, std430) readonly  buffer VerticesIn {
    Vertex      verticesIn[];
};

layout(binding=1, std430) writeonly buffer VerticesOut {
    Vertex      verticesOut[];
};

layout(binding=2, std430) readonly  buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly  buffer VaryingsIn {
    VaryingData varyingsIn[];
};

layout(binding=4, std430) writeonly buffer VaryingsOut {
    VaryingData varyingsOut[];
};

layout(location=0) uniform uint vertexCount;
layout(location=1) uniform uint vertexOffset;
layout(location=2) uniform uint varyingOffset;

void main() {
    uint    indexIn     = gl_GlobalInvocationID.x;
    uint    vertexOut   = indexIn + vertexOffset;
    uint    varyingOut  = indexIn + varyingOffset;

    if (indexIn >= vertexCount) {
        return;
    }

    int     offset      = varyingsIn[indexIn]   .offset;
    uint    reference   = indexIn - offset;
    int     sharing     = varyingsIn[reference] .sharing;

    mat4    transformMatrix;
    // mat3    normalMatrix;

    if (sharing != -1) {
        transformMatrix = sharings[sharing].transform;
        // normalMatrix    = sharings[sharing].normal;
    } else {
        transformMatrix = mat4(1.0);
        // normalMatrix    = mat3(1.0);
    }

    Vertex  vertex      = verticesIn[indexIn];
    vec4    pos         = transformMatrix * vec4    (vertex.x, vertex.y, vertex.z, 1.0);
    // vec3    normal      = normalize                 (normalMatrix * unpackSnorm4x8(vertex.normal).xyz);

    verticesOut[vertexOut].x        = pos.x;
    verticesOut[vertexOut].y        = pos.y;
    verticesOut[vertexOut].z        = pos.z;

    verticesOut[vertexOut].u0       = vertex.u0;
    verticesOut[vertexOut].v0       = vertex.v0;

    // verticesOut[vertexOut].color    = verticesIn[reference].color;
    // verticesOut[vertexOut].uv1      = verticesIn[reference].uv1;
    // verticesOut[vertexOut].uv2      = verticesIn[reference].uv2;

    // verticesOut[vertexOut].normal   = packSnorm4x8  (vec4(normal, 0.0));

    varyingsOut[varyingOut].offset  = offset;
    varyingsOut[varyingOut].flags   = varyingsIn[reference].flags;
}