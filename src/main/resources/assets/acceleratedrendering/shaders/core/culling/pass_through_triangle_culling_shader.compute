#version 460 core

struct Polygon {
    uint vertex1;
    uint vertex2;
    uint vertex3;
};

layout(local_size_x = 128) in;

layout(binding=6, std430) writeonly buffer PolygonsOut {
    Polygon polygonsOut[];
};

layout(binding=0, offset=0) uniform atomic_uint indexCounter;

layout(location=0) uniform mat4 viewMatrix;
layout(location=1) uniform uint polygonCount;
layout(location=2) uniform uint vertexOffset;

void main() {
    uint index      = gl_GlobalInvocationID.x;
    uint base       = index * 3u;

    if (index >= polygonCount) {
        return;
    }

    uint index1     = vertexOffset + base + 0u;
    uint index2     = vertexOffset + base + 1u;
    uint index3     = vertexOffset + base + 2u;

    uint indexOut   = atomicCounterAdd(indexCounter, 3u) / 3u;

    polygonsOut[indexOut].vertex1 = index1;
    polygonsOut[indexOut].vertex2 = index2;
    polygonsOut[indexOut].vertex3 = index3;
}